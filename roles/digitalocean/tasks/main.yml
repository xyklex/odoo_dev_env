---
- block:
   - name: removing key if key name exists
     digital_ocean:
       state: absent
       command: ssh
       name: "{{ ssh_key.name }}"
       api_token: "{{ do_token }}"
     register: rm_ssh_key
     until: rm_ssh_key.changed != true
     retries: 10
     delay: 1

  rescue:
     - name: Collect the fail error
       digital_ocean:
         state: absent
         command: ssh
         api_token: "{{ do_token }}"
         name: "{{ ssh_key.name }}"
       register: rm_ssh_key
       ignore_errors: yes

     - debug: var=rm_ssh_key

     - fail:
         msg: "Please, ensure that your API token is not read-only."

- name: ensure key exists at DigitalOcean
  digital_ocean: 
    state: present
    command: ssh
    name: "{{ ssh_key.name }}"
    ssh_pub_key: "{{ lookup('file', '{{ ssh_key.public }}') }}"
    api_token: "{{ do_token }}"
  register: do_ssh_key

- name: creating the droplet
  digital_ocean: 
    state: present
    command: droplet
    name: "{{ hostname }}"
    size_id: "{{ size }}"
    region_id: "{{ region }}"
    image_id: "{{ image }}"
    ssh_key_ids: "{{ do_ssh_key.ssh_key.id }}"
    api_token: "{{ do_token }}"
    unique_name: yes
  register: do

- name: Add the droplet to an inventory group
  add_host:
    name: "{{ do.droplet.ip_address }}"
    groups: digitalocean
    ansible_ssh_user: root
    ansible_python_interpreter: "/usr/bin/python2.7"
    ansible_ssh_private_key_file: "{{ ssh_key.private }}"
    do_access_token: "{{ do_token }}"
    do_droplet_id: "{{ do.droplet.id }}"
    cloud_provider: digitalocean

- set_fact:
    cloud_instance_ip: "{{ do.droplet.ip_address }}"

- name: tag the droplet
  digital_ocean_tag:
    name: "{{ item }}"
    resource_id: "{{ do.droplet.id }}"
    api_token: "{{ do_token }}"
  with_items:
    - "Environment:Odoo-Development"
    - "Development:{{ hostname }}"

- name: Get droplets
  uri:
    url: "https://api.digitalocean.com/v2/droplets?tag_name=Environment:Odoo-Development"
    method: GET
    status_code: 200
    headers:
      Content-Type: "application/json"
      Authorization: "Bearer {{ do_token }}"
  register: do_droplets

- name: Ensure the group digitalocean exists in the dynamic inventory file
  lineinfile:
    state: present
    dest: "{{ dynamic_inventory_file }}"
    line: '[digitalocean]'

- name: Populate the dynamic inventory
  lineinfile:
    state: present
    dest: "{{ dynamic_inventory_file }}" 
    insertafter: '\[digitalocean\]'
    regexp: "^{{ item.networks.v4[0].ip_address }}.*"
    line: "{{ item.networks.v4[0].ip_address }}"
  with_items:
    - "{{ do_droplets.json.droplets }}"
